// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Backend/ent/advertisement"
	"Backend/ent/predicate"
	"Backend/ent/users"
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAdvertisement = "Advertisement"
	TypeUsers         = "Users"
)

// AdvertisementMutation represents an operation that mutates the Advertisement nodes in the graph.
type AdvertisementMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Date         *string
	_Contrat      *string
	_Entreprise   *string
	_Image        *string
	_Localisation *string
	_Name         *string
	_Remuneration *string
	_Sector       *string
	clearedFields map[string]struct{}
	users         *int
	clearedusers  bool
	done          bool
	oldValue      func(context.Context) (*Advertisement, error)
	predicates    []predicate.Advertisement
}

var _ ent.Mutation = (*AdvertisementMutation)(nil)

// advertisementOption allows management of the mutation configuration using functional options.
type advertisementOption func(*AdvertisementMutation)

// newAdvertisementMutation creates new mutation for the Advertisement entity.
func newAdvertisementMutation(c config, op Op, opts ...advertisementOption) *AdvertisementMutation {
	m := &AdvertisementMutation{
		config:        c,
		op:            op,
		typ:           TypeAdvertisement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdvertisementID sets the ID field of the mutation.
func withAdvertisementID(id int) advertisementOption {
	return func(m *AdvertisementMutation) {
		var (
			err   error
			once  sync.Once
			value *Advertisement
		)
		m.oldValue = func(ctx context.Context) (*Advertisement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Advertisement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdvertisement sets the old Advertisement of the mutation.
func withAdvertisement(node *Advertisement) advertisementOption {
	return func(m *AdvertisementMutation) {
		m.oldValue = func(context.Context) (*Advertisement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdvertisementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdvertisementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdvertisementMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdvertisementMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Advertisement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDate sets the "Date" field.
func (m *AdvertisementMutation) SetDate(s string) {
	m._Date = &s
}

// Date returns the value of the "Date" field in the mutation.
func (m *AdvertisementMutation) Date() (r string, exists bool) {
	v := m._Date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "Date" field's value of the Advertisement entity.
// If the Advertisement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvertisementMutation) OldDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "Date" field.
func (m *AdvertisementMutation) ResetDate() {
	m._Date = nil
}

// SetContrat sets the "Contrat" field.
func (m *AdvertisementMutation) SetContrat(s string) {
	m._Contrat = &s
}

// Contrat returns the value of the "Contrat" field in the mutation.
func (m *AdvertisementMutation) Contrat() (r string, exists bool) {
	v := m._Contrat
	if v == nil {
		return
	}
	return *v, true
}

// OldContrat returns the old "Contrat" field's value of the Advertisement entity.
// If the Advertisement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvertisementMutation) OldContrat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContrat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContrat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContrat: %w", err)
	}
	return oldValue.Contrat, nil
}

// ResetContrat resets all changes to the "Contrat" field.
func (m *AdvertisementMutation) ResetContrat() {
	m._Contrat = nil
}

// SetEntreprise sets the "Entreprise" field.
func (m *AdvertisementMutation) SetEntreprise(s string) {
	m._Entreprise = &s
}

// Entreprise returns the value of the "Entreprise" field in the mutation.
func (m *AdvertisementMutation) Entreprise() (r string, exists bool) {
	v := m._Entreprise
	if v == nil {
		return
	}
	return *v, true
}

// OldEntreprise returns the old "Entreprise" field's value of the Advertisement entity.
// If the Advertisement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvertisementMutation) OldEntreprise(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntreprise is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntreprise requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntreprise: %w", err)
	}
	return oldValue.Entreprise, nil
}

// ResetEntreprise resets all changes to the "Entreprise" field.
func (m *AdvertisementMutation) ResetEntreprise() {
	m._Entreprise = nil
}

// SetImage sets the "Image" field.
func (m *AdvertisementMutation) SetImage(s string) {
	m._Image = &s
}

// Image returns the value of the "Image" field in the mutation.
func (m *AdvertisementMutation) Image() (r string, exists bool) {
	v := m._Image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "Image" field's value of the Advertisement entity.
// If the Advertisement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvertisementMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "Image" field.
func (m *AdvertisementMutation) ResetImage() {
	m._Image = nil
}

// SetLocalisation sets the "Localisation" field.
func (m *AdvertisementMutation) SetLocalisation(s string) {
	m._Localisation = &s
}

// Localisation returns the value of the "Localisation" field in the mutation.
func (m *AdvertisementMutation) Localisation() (r string, exists bool) {
	v := m._Localisation
	if v == nil {
		return
	}
	return *v, true
}

// OldLocalisation returns the old "Localisation" field's value of the Advertisement entity.
// If the Advertisement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvertisementMutation) OldLocalisation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocalisation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocalisation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocalisation: %w", err)
	}
	return oldValue.Localisation, nil
}

// ResetLocalisation resets all changes to the "Localisation" field.
func (m *AdvertisementMutation) ResetLocalisation() {
	m._Localisation = nil
}

// SetName sets the "Name" field.
func (m *AdvertisementMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the value of the "Name" field in the mutation.
func (m *AdvertisementMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "Name" field's value of the Advertisement entity.
// If the Advertisement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvertisementMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "Name" field.
func (m *AdvertisementMutation) ResetName() {
	m._Name = nil
}

// SetRemuneration sets the "Remuneration" field.
func (m *AdvertisementMutation) SetRemuneration(s string) {
	m._Remuneration = &s
}

// Remuneration returns the value of the "Remuneration" field in the mutation.
func (m *AdvertisementMutation) Remuneration() (r string, exists bool) {
	v := m._Remuneration
	if v == nil {
		return
	}
	return *v, true
}

// OldRemuneration returns the old "Remuneration" field's value of the Advertisement entity.
// If the Advertisement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvertisementMutation) OldRemuneration(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemuneration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemuneration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemuneration: %w", err)
	}
	return oldValue.Remuneration, nil
}

// ResetRemuneration resets all changes to the "Remuneration" field.
func (m *AdvertisementMutation) ResetRemuneration() {
	m._Remuneration = nil
}

// SetSector sets the "Sector" field.
func (m *AdvertisementMutation) SetSector(s string) {
	m._Sector = &s
}

// Sector returns the value of the "Sector" field in the mutation.
func (m *AdvertisementMutation) Sector() (r string, exists bool) {
	v := m._Sector
	if v == nil {
		return
	}
	return *v, true
}

// OldSector returns the old "Sector" field's value of the Advertisement entity.
// If the Advertisement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvertisementMutation) OldSector(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSector: %w", err)
	}
	return oldValue.Sector, nil
}

// ResetSector resets all changes to the "Sector" field.
func (m *AdvertisementMutation) ResetSector() {
	m._Sector = nil
}

// SetUsersID sets the "users" edge to the Users entity by id.
func (m *AdvertisementMutation) SetUsersID(id int) {
	m.users = &id
}

// ClearUsers clears the "users" edge to the Users entity.
func (m *AdvertisementMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the Users entity was cleared.
func (m *AdvertisementMutation) UsersCleared() bool {
	return m.clearedusers
}

// UsersID returns the "users" edge ID in the mutation.
func (m *AdvertisementMutation) UsersID() (id int, exists bool) {
	if m.users != nil {
		return *m.users, true
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UsersID instead. It exists only for internal usage by the builders.
func (m *AdvertisementMutation) UsersIDs() (ids []int) {
	if id := m.users; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *AdvertisementMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
}

// Where appends a list predicates to the AdvertisementMutation builder.
func (m *AdvertisementMutation) Where(ps ...predicate.Advertisement) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AdvertisementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Advertisement).
func (m *AdvertisementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdvertisementMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m._Date != nil {
		fields = append(fields, advertisement.FieldDate)
	}
	if m._Contrat != nil {
		fields = append(fields, advertisement.FieldContrat)
	}
	if m._Entreprise != nil {
		fields = append(fields, advertisement.FieldEntreprise)
	}
	if m._Image != nil {
		fields = append(fields, advertisement.FieldImage)
	}
	if m._Localisation != nil {
		fields = append(fields, advertisement.FieldLocalisation)
	}
	if m._Name != nil {
		fields = append(fields, advertisement.FieldName)
	}
	if m._Remuneration != nil {
		fields = append(fields, advertisement.FieldRemuneration)
	}
	if m._Sector != nil {
		fields = append(fields, advertisement.FieldSector)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdvertisementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case advertisement.FieldDate:
		return m.Date()
	case advertisement.FieldContrat:
		return m.Contrat()
	case advertisement.FieldEntreprise:
		return m.Entreprise()
	case advertisement.FieldImage:
		return m.Image()
	case advertisement.FieldLocalisation:
		return m.Localisation()
	case advertisement.FieldName:
		return m.Name()
	case advertisement.FieldRemuneration:
		return m.Remuneration()
	case advertisement.FieldSector:
		return m.Sector()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdvertisementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case advertisement.FieldDate:
		return m.OldDate(ctx)
	case advertisement.FieldContrat:
		return m.OldContrat(ctx)
	case advertisement.FieldEntreprise:
		return m.OldEntreprise(ctx)
	case advertisement.FieldImage:
		return m.OldImage(ctx)
	case advertisement.FieldLocalisation:
		return m.OldLocalisation(ctx)
	case advertisement.FieldName:
		return m.OldName(ctx)
	case advertisement.FieldRemuneration:
		return m.OldRemuneration(ctx)
	case advertisement.FieldSector:
		return m.OldSector(ctx)
	}
	return nil, fmt.Errorf("unknown Advertisement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdvertisementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case advertisement.FieldDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case advertisement.FieldContrat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContrat(v)
		return nil
	case advertisement.FieldEntreprise:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntreprise(v)
		return nil
	case advertisement.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case advertisement.FieldLocalisation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocalisation(v)
		return nil
	case advertisement.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case advertisement.FieldRemuneration:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemuneration(v)
		return nil
	case advertisement.FieldSector:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSector(v)
		return nil
	}
	return fmt.Errorf("unknown Advertisement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdvertisementMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdvertisementMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdvertisementMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Advertisement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdvertisementMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdvertisementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdvertisementMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Advertisement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdvertisementMutation) ResetField(name string) error {
	switch name {
	case advertisement.FieldDate:
		m.ResetDate()
		return nil
	case advertisement.FieldContrat:
		m.ResetContrat()
		return nil
	case advertisement.FieldEntreprise:
		m.ResetEntreprise()
		return nil
	case advertisement.FieldImage:
		m.ResetImage()
		return nil
	case advertisement.FieldLocalisation:
		m.ResetLocalisation()
		return nil
	case advertisement.FieldName:
		m.ResetName()
		return nil
	case advertisement.FieldRemuneration:
		m.ResetRemuneration()
		return nil
	case advertisement.FieldSector:
		m.ResetSector()
		return nil
	}
	return fmt.Errorf("unknown Advertisement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdvertisementMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.users != nil {
		edges = append(edges, advertisement.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdvertisementMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case advertisement.EdgeUsers:
		if id := m.users; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdvertisementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdvertisementMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdvertisementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedusers {
		edges = append(edges, advertisement.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdvertisementMutation) EdgeCleared(name string) bool {
	switch name {
	case advertisement.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdvertisementMutation) ClearEdge(name string) error {
	switch name {
	case advertisement.EdgeUsers:
		m.ClearUsers()
		return nil
	}
	return fmt.Errorf("unknown Advertisement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdvertisementMutation) ResetEdge(name string) error {
	switch name {
	case advertisement.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Advertisement edge %s", name)
}

// UsersMutation represents an operation that mutates the Users nodes in the graph.
type UsersMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_FistName            *string
	_LastName            *string
	_Email               *string
	_Password            *string
	clearedFields        map[string]struct{}
	advertisement        map[int]struct{}
	removedadvertisement map[int]struct{}
	clearedadvertisement bool
	done                 bool
	oldValue             func(context.Context) (*Users, error)
	predicates           []predicate.Users
}

var _ ent.Mutation = (*UsersMutation)(nil)

// usersOption allows management of the mutation configuration using functional options.
type usersOption func(*UsersMutation)

// newUsersMutation creates new mutation for the Users entity.
func newUsersMutation(c config, op Op, opts ...usersOption) *UsersMutation {
	m := &UsersMutation{
		config:        c,
		op:            op,
		typ:           TypeUsers,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUsersID sets the ID field of the mutation.
func withUsersID(id int) usersOption {
	return func(m *UsersMutation) {
		var (
			err   error
			once  sync.Once
			value *Users
		)
		m.oldValue = func(ctx context.Context) (*Users, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Users.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUsers sets the old Users of the mutation.
func withUsers(node *Users) usersOption {
	return func(m *UsersMutation) {
		m.oldValue = func(context.Context) (*Users, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UsersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UsersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UsersMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UsersMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Users.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFistName sets the "FistName" field.
func (m *UsersMutation) SetFistName(s string) {
	m._FistName = &s
}

// FistName returns the value of the "FistName" field in the mutation.
func (m *UsersMutation) FistName() (r string, exists bool) {
	v := m._FistName
	if v == nil {
		return
	}
	return *v, true
}

// OldFistName returns the old "FistName" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldFistName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFistName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFistName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFistName: %w", err)
	}
	return oldValue.FistName, nil
}

// ResetFistName resets all changes to the "FistName" field.
func (m *UsersMutation) ResetFistName() {
	m._FistName = nil
}

// SetLastName sets the "LastName" field.
func (m *UsersMutation) SetLastName(s string) {
	m._LastName = &s
}

// LastName returns the value of the "LastName" field in the mutation.
func (m *UsersMutation) LastName() (r string, exists bool) {
	v := m._LastName
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "LastName" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "LastName" field.
func (m *UsersMutation) ResetLastName() {
	m._LastName = nil
}

// SetEmail sets the "Email" field.
func (m *UsersMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the value of the "Email" field in the mutation.
func (m *UsersMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "Email" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "Email" field.
func (m *UsersMutation) ResetEmail() {
	m._Email = nil
}

// SetPassword sets the "Password" field.
func (m *UsersMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the value of the "Password" field in the mutation.
func (m *UsersMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "Password" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "Password" field.
func (m *UsersMutation) ResetPassword() {
	m._Password = nil
}

// AddAdvertisementIDs adds the "advertisement" edge to the Advertisement entity by ids.
func (m *UsersMutation) AddAdvertisementIDs(ids ...int) {
	if m.advertisement == nil {
		m.advertisement = make(map[int]struct{})
	}
	for i := range ids {
		m.advertisement[ids[i]] = struct{}{}
	}
}

// ClearAdvertisement clears the "advertisement" edge to the Advertisement entity.
func (m *UsersMutation) ClearAdvertisement() {
	m.clearedadvertisement = true
}

// AdvertisementCleared reports if the "advertisement" edge to the Advertisement entity was cleared.
func (m *UsersMutation) AdvertisementCleared() bool {
	return m.clearedadvertisement
}

// RemoveAdvertisementIDs removes the "advertisement" edge to the Advertisement entity by IDs.
func (m *UsersMutation) RemoveAdvertisementIDs(ids ...int) {
	if m.removedadvertisement == nil {
		m.removedadvertisement = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.advertisement, ids[i])
		m.removedadvertisement[ids[i]] = struct{}{}
	}
}

// RemovedAdvertisement returns the removed IDs of the "advertisement" edge to the Advertisement entity.
func (m *UsersMutation) RemovedAdvertisementIDs() (ids []int) {
	for id := range m.removedadvertisement {
		ids = append(ids, id)
	}
	return
}

// AdvertisementIDs returns the "advertisement" edge IDs in the mutation.
func (m *UsersMutation) AdvertisementIDs() (ids []int) {
	for id := range m.advertisement {
		ids = append(ids, id)
	}
	return
}

// ResetAdvertisement resets all changes to the "advertisement" edge.
func (m *UsersMutation) ResetAdvertisement() {
	m.advertisement = nil
	m.clearedadvertisement = false
	m.removedadvertisement = nil
}

// Where appends a list predicates to the UsersMutation builder.
func (m *UsersMutation) Where(ps ...predicate.Users) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UsersMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Users).
func (m *UsersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UsersMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._FistName != nil {
		fields = append(fields, users.FieldFistName)
	}
	if m._LastName != nil {
		fields = append(fields, users.FieldLastName)
	}
	if m._Email != nil {
		fields = append(fields, users.FieldEmail)
	}
	if m._Password != nil {
		fields = append(fields, users.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UsersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case users.FieldFistName:
		return m.FistName()
	case users.FieldLastName:
		return m.LastName()
	case users.FieldEmail:
		return m.Email()
	case users.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UsersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case users.FieldFistName:
		return m.OldFistName(ctx)
	case users.FieldLastName:
		return m.OldLastName(ctx)
	case users.FieldEmail:
		return m.OldEmail(ctx)
	case users.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Users field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case users.FieldFistName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFistName(v)
		return nil
	case users.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case users.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case users.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UsersMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UsersMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Users numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UsersMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UsersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UsersMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Users nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UsersMutation) ResetField(name string) error {
	switch name {
	case users.FieldFistName:
		m.ResetFistName()
		return nil
	case users.FieldLastName:
		m.ResetLastName()
		return nil
	case users.FieldEmail:
		m.ResetEmail()
		return nil
	case users.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UsersMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.advertisement != nil {
		edges = append(edges, users.EdgeAdvertisement)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UsersMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case users.EdgeAdvertisement:
		ids := make([]ent.Value, 0, len(m.advertisement))
		for id := range m.advertisement {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UsersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedadvertisement != nil {
		edges = append(edges, users.EdgeAdvertisement)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UsersMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case users.EdgeAdvertisement:
		ids := make([]ent.Value, 0, len(m.removedadvertisement))
		for id := range m.removedadvertisement {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UsersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedadvertisement {
		edges = append(edges, users.EdgeAdvertisement)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UsersMutation) EdgeCleared(name string) bool {
	switch name {
	case users.EdgeAdvertisement:
		return m.clearedadvertisement
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UsersMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Users unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UsersMutation) ResetEdge(name string) error {
	switch name {
	case users.EdgeAdvertisement:
		m.ResetAdvertisement()
		return nil
	}
	return fmt.Errorf("unknown Users edge %s", name)
}
