// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Backend/ent/advertisement"
	"Backend/ent/users"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdvertisementCreate is the builder for creating a Advertisement entity.
type AdvertisementCreate struct {
	config
	mutation *AdvertisementMutation
	hooks    []Hook
}

// SetDate sets the "Date" field.
func (ac *AdvertisementCreate) SetDate(s string) *AdvertisementCreate {
	ac.mutation.SetDate(s)
	return ac
}

// SetContrat sets the "Contrat" field.
func (ac *AdvertisementCreate) SetContrat(s string) *AdvertisementCreate {
	ac.mutation.SetContrat(s)
	return ac
}

// SetEntreprise sets the "Entreprise" field.
func (ac *AdvertisementCreate) SetEntreprise(s string) *AdvertisementCreate {
	ac.mutation.SetEntreprise(s)
	return ac
}

// SetImage sets the "Image" field.
func (ac *AdvertisementCreate) SetImage(s string) *AdvertisementCreate {
	ac.mutation.SetImage(s)
	return ac
}

// SetLocalisation sets the "Localisation" field.
func (ac *AdvertisementCreate) SetLocalisation(s string) *AdvertisementCreate {
	ac.mutation.SetLocalisation(s)
	return ac
}

// SetName sets the "Name" field.
func (ac *AdvertisementCreate) SetName(s string) *AdvertisementCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetRemuneration sets the "Remuneration" field.
func (ac *AdvertisementCreate) SetRemuneration(s string) *AdvertisementCreate {
	ac.mutation.SetRemuneration(s)
	return ac
}

// SetSector sets the "Sector" field.
func (ac *AdvertisementCreate) SetSector(s string) *AdvertisementCreate {
	ac.mutation.SetSector(s)
	return ac
}

// SetUsersID sets the "users" edge to the Users entity by ID.
func (ac *AdvertisementCreate) SetUsersID(id int) *AdvertisementCreate {
	ac.mutation.SetUsersID(id)
	return ac
}

// SetNillableUsersID sets the "users" edge to the Users entity by ID if the given value is not nil.
func (ac *AdvertisementCreate) SetNillableUsersID(id *int) *AdvertisementCreate {
	if id != nil {
		ac = ac.SetUsersID(*id)
	}
	return ac
}

// SetUsers sets the "users" edge to the Users entity.
func (ac *AdvertisementCreate) SetUsers(u *Users) *AdvertisementCreate {
	return ac.SetUsersID(u.ID)
}

// Mutation returns the AdvertisementMutation object of the builder.
func (ac *AdvertisementCreate) Mutation() *AdvertisementMutation {
	return ac.mutation
}

// Save creates the Advertisement in the database.
func (ac *AdvertisementCreate) Save(ctx context.Context) (*Advertisement, error) {
	var (
		err  error
		node *Advertisement
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdvertisementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AdvertisementCreate) SaveX(ctx context.Context) *Advertisement {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AdvertisementCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AdvertisementCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AdvertisementCreate) check() error {
	if _, ok := ac.mutation.Date(); !ok {
		return &ValidationError{Name: "Date", err: errors.New(`ent: missing required field "Advertisement.Date"`)}
	}
	if _, ok := ac.mutation.Contrat(); !ok {
		return &ValidationError{Name: "Contrat", err: errors.New(`ent: missing required field "Advertisement.Contrat"`)}
	}
	if _, ok := ac.mutation.Entreprise(); !ok {
		return &ValidationError{Name: "Entreprise", err: errors.New(`ent: missing required field "Advertisement.Entreprise"`)}
	}
	if _, ok := ac.mutation.Image(); !ok {
		return &ValidationError{Name: "Image", err: errors.New(`ent: missing required field "Advertisement.Image"`)}
	}
	if _, ok := ac.mutation.Localisation(); !ok {
		return &ValidationError{Name: "Localisation", err: errors.New(`ent: missing required field "Advertisement.Localisation"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Advertisement.Name"`)}
	}
	if _, ok := ac.mutation.Remuneration(); !ok {
		return &ValidationError{Name: "Remuneration", err: errors.New(`ent: missing required field "Advertisement.Remuneration"`)}
	}
	if _, ok := ac.mutation.Sector(); !ok {
		return &ValidationError{Name: "Sector", err: errors.New(`ent: missing required field "Advertisement.Sector"`)}
	}
	return nil
}

func (ac *AdvertisementCreate) sqlSave(ctx context.Context) (*Advertisement, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AdvertisementCreate) createSpec() (*Advertisement, *sqlgraph.CreateSpec) {
	var (
		_node = &Advertisement{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: advertisement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: advertisement.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertisement.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := ac.mutation.Contrat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertisement.FieldContrat,
		})
		_node.Contrat = value
	}
	if value, ok := ac.mutation.Entreprise(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertisement.FieldEntreprise,
		})
		_node.Entreprise = value
	}
	if value, ok := ac.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertisement.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := ac.mutation.Localisation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertisement.FieldLocalisation,
		})
		_node.Localisation = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertisement.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ac.mutation.Remuneration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertisement.FieldRemuneration,
		})
		_node.Remuneration = value
	}
	if value, ok := ac.mutation.Sector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: advertisement.FieldSector,
		})
		_node.Sector = value
	}
	if nodes := ac.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   advertisement.UsersTable,
			Columns: []string{advertisement.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.users_advertisement = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdvertisementCreateBulk is the builder for creating many Advertisement entities in bulk.
type AdvertisementCreateBulk struct {
	config
	builders []*AdvertisementCreate
}

// Save creates the Advertisement entities in the database.
func (acb *AdvertisementCreateBulk) Save(ctx context.Context) ([]*Advertisement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Advertisement, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdvertisementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AdvertisementCreateBulk) SaveX(ctx context.Context) []*Advertisement {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AdvertisementCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AdvertisementCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
