// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Backend/ent/advertisement"
	"Backend/ent/users"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Advertisement is the model entity for the Advertisement schema.
type Advertisement struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Date holds the value of the "Date" field.
	Date string `json:"Date,omitempty"`
	// Contrat holds the value of the "Contrat" field.
	Contrat string `json:"Contrat,omitempty"`
	// Entreprise holds the value of the "Entreprise" field.
	Entreprise string `json:"Entreprise,omitempty"`
	// Image holds the value of the "Image" field.
	Image string `json:"Image,omitempty"`
	// Localisation holds the value of the "Localisation" field.
	Localisation string `json:"Localisation,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Remuneration holds the value of the "Remuneration" field.
	Remuneration string `json:"Remuneration,omitempty"`
	// Sector holds the value of the "Sector" field.
	Sector string `json:"Sector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdvertisementQuery when eager-loading is set.
	Edges               AdvertisementEdges `json:"edges"`
	users_advertisement *int
}

// AdvertisementEdges holds the relations/edges for other nodes in the graph.
type AdvertisementEdges struct {
	// Users holds the value of the users edge.
	Users *Users `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdvertisementEdges) UsersOrErr() (*Users, error) {
	if e.loadedTypes[0] {
		if e.Users == nil {
			// The edge users was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: users.Label}
		}
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Advertisement) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case advertisement.FieldID:
			values[i] = new(sql.NullInt64)
		case advertisement.FieldDate, advertisement.FieldContrat, advertisement.FieldEntreprise, advertisement.FieldImage, advertisement.FieldLocalisation, advertisement.FieldName, advertisement.FieldRemuneration, advertisement.FieldSector:
			values[i] = new(sql.NullString)
		case advertisement.ForeignKeys[0]: // users_advertisement
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Advertisement", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Advertisement fields.
func (a *Advertisement) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case advertisement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case advertisement.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Date", values[i])
			} else if value.Valid {
				a.Date = value.String
			}
		case advertisement.FieldContrat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Contrat", values[i])
			} else if value.Valid {
				a.Contrat = value.String
			}
		case advertisement.FieldEntreprise:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Entreprise", values[i])
			} else if value.Valid {
				a.Entreprise = value.String
			}
		case advertisement.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Image", values[i])
			} else if value.Valid {
				a.Image = value.String
			}
		case advertisement.FieldLocalisation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Localisation", values[i])
			} else if value.Valid {
				a.Localisation = value.String
			}
		case advertisement.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case advertisement.FieldRemuneration:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Remuneration", values[i])
			} else if value.Valid {
				a.Remuneration = value.String
			}
		case advertisement.FieldSector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Sector", values[i])
			} else if value.Valid {
				a.Sector = value.String
			}
		case advertisement.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field users_advertisement", value)
			} else if value.Valid {
				a.users_advertisement = new(int)
				*a.users_advertisement = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUsers queries the "users" edge of the Advertisement entity.
func (a *Advertisement) QueryUsers() *UsersQuery {
	return (&AdvertisementClient{config: a.config}).QueryUsers(a)
}

// Update returns a builder for updating this Advertisement.
// Note that you need to call Advertisement.Unwrap() before calling this method if this Advertisement
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Advertisement) Update() *AdvertisementUpdateOne {
	return (&AdvertisementClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Advertisement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Advertisement) Unwrap() *Advertisement {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Advertisement is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Advertisement) String() string {
	var builder strings.Builder
	builder.WriteString("Advertisement(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", Date=")
	builder.WriteString(a.Date)
	builder.WriteString(", Contrat=")
	builder.WriteString(a.Contrat)
	builder.WriteString(", Entreprise=")
	builder.WriteString(a.Entreprise)
	builder.WriteString(", Image=")
	builder.WriteString(a.Image)
	builder.WriteString(", Localisation=")
	builder.WriteString(a.Localisation)
	builder.WriteString(", Name=")
	builder.WriteString(a.Name)
	builder.WriteString(", Remuneration=")
	builder.WriteString(a.Remuneration)
	builder.WriteString(", Sector=")
	builder.WriteString(a.Sector)
	builder.WriteByte(')')
	return builder.String()
}

// Advertisements is a parsable slice of Advertisement.
type Advertisements []*Advertisement

func (a Advertisements) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
